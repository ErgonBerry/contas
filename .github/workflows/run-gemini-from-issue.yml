

# .github/workflows/run-gemini-from-issue.yml
name: "IA-Driven Development Workflow"

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: write # Permiss√£o para criar branch, commitar e fazer push
  pull-requests: write # Permiss√£o para criar Pull Requests

jobs:
  ia_driven_task:
    runs-on: ubuntu-latest
    # Executa apenas se a issue tiver o label 'ia-driven'
    if: contains(github.event.issue.labels.*.name, 'ia-driven')

    steps:
      - name: "Checkout da branch feature/ia"
        uses: actions/checkout@v4
        with:
          ref: 'feature/ia' # Faz o checkout da branch espec√≠fica
          fetch-depth: 0

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      

      - name: "Configurar Git"
        run: |
          git config user.name "Gemini-CLI Bot"
          git config user.email "github-actions-bot@users.noreply.github.com"

      - name: "Criar Branch e Preparar Plano de A√ß√£o"
        id: prepare_branch
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BRANCH_NAME="ia/driven-$TIMESTAMP"
          PLAN_FILE_PATH="ia/templates/$TIMESTAMP.md"
          
          # Criar e mudar para a nova branch
          git checkout -b $BRANCH_NAME
          
          # Ler o template e substituir o placeholder
          TASK_DESCRIPTION="${{ github.event.issue.body }}"
          TEMPLATE_CONTENT=$(cat ia/templates/001-general.md)
          PLAN_CONTENT="${TEMPLATE_CONTENT//<DESCRICAO_AQUI_CHANGE_ME>/$TASK_DESCRIPTION}"
          
          # Salvar o novo plano de a√ß√£o
          echo "$PLAN_CONTENT" > $PLAN_FILE_PATH
          
          # Passar as vari√°veis para os pr√≥ximos steps
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "plan_file_path=$PLAN_FILE_PATH" >> $GITHUB_OUTPUT
          echo "plan_content<<EOF" >> $GITHUB_OUTPUT
          echo "$PLAN_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: "Executar Gemini-CLI com o Plano de A√ß√£o"
        id: gemini_run
        run: |
          # Usa o caminho do arquivo do plano de a√ß√£o como parte do prompt.
          PLAN_FILE_PATH="${{ steps.prepare_branch.outputs.plan_file_path }}"
          PROMPT_COMMAND="criar o plano de a√ß√£o para o arquivo @${PLAN_FILE_PATH}"

          echo "Executando comando: $PROMPT_COMMAND"
          RESULT=$(npx @google/gemini-cli "$PROMPT_COMMAND")
          
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: "Fazer Commit e Push das Altera√ß√µes"
        run: |
          # Adicionar o novo plano de a√ß√£o e quaisquer outras altera√ß√µes
          git add .
          
          # Verificar se h√° algo para commitar
          if git diff --staged --quiet; then
            echo "Nenhuma altera√ß√£o de c√≥digo detectada pelo Gemini-CLI. Apenas o plano de a√ß√£o ser√° commitado."
            git commit -m "feat(ia): criar plano de a√ß√£o para issue #${{ github.event.issue.number }}" -m "Issue: ${{ github.event.issue.html_url }}"
          else
            echo "Altera√ß√µes de c√≥digo detectadas. Commitando plano e c√≥digo."
            git commit -m "feat(ia): implementar tarefa da issue #${{ github.event.issue.number }}" -m "Plano de a√ß√£o e altera√ß√µes de c√≥digo gerados por IA.

            Issue: ${{ github.event.issue.html_url }}"
          fi
          
          git push origin ${{ steps.prepare_branch.outputs.branch_name }}

      - name: "Criar Pull Request em Draft"
        id: create_pr
        uses: actions/github-script@v7
        with:
          script: |
            const headBranch = "${{ steps.prepare_branch.outputs.branch_name }}";
            const baseBranch = "feature/ia";
            const issueTitle = "${{ github.event.issue.title }}";
            const issueNumber = context.issue.number;

            try {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[IA-DRIVEN] ${issueTitle}`,
                head: headBranch,
                base: baseBranch,
                body: `Este PR foi gerado automaticamente pela IA para resolver a issue #${issueNumber}.\n\n- **Plano de A√ß√£o**: [${{ steps.prepare_branch.outputs.plan_file_path }}](${context.payload.repository.html_url}/blob/${headBranch}/${{ steps.prepare_branch.outputs.plan_file_path }})\n- **Issue Original**: #${issueNumber}`,
                draft: true
              });
              console.log(`Pull Request criado: ${pr.data.html_url}`);
              return pr.data;
            } catch (error) {
              console.error(`Erro ao criar Pull Request: ${error.message}`);
              console.error(`Verifique se a branch '${baseBranch}' existe no reposit√≥rio.`);
              // Posta um coment√°rio de erro se a cria√ß√£o do PR falhar
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `### ‚ö†Ô∏è Erro ao criar Pull Request\n\nN√£o foi poss√≠vel criar o Pull Request da branch \`${headBranch}\` para \`${baseBranch}\`.\n\n**Motivo prov√°vel:** A branch \`${baseBranch}\` n√£o existe. Por favor, crie-a e o Pull Request poder√° ser aberto manualmente.`
              });
              return null;
            }

      - name: "Postar Resultado na Issue"
        uses: actions/github-script@v7
        with:
          script: |
            const prUrl = ${{ toJSON(steps.create_pr.outputs.result) }}.html_url;
            const branchName = "${{ steps.prepare_branch.outputs.branch_name }}";
            const repoUrl = context.payload.repository.html_url;
            let output;

            if (prUrl) {
              output = `
              ### ü§ñ‚ú® Fluxo de Trabalho de IA Conclu√≠do
              
              Um Pull Request em modo draft foi criado com as altera√ß√µes geradas pela IA.
              
              - **Pull Request**: [${{ github.event.issue.title }}](${prUrl})
              - **Branch**: `[${branchName}](${repoUrl}/tree/${branchName})`
              - **Plano de A√ß√£o**: [${{ steps.prepare_branch.outputs.plan_file_path }}](${repoUrl}/blob/${branchName}/${{ steps.prepare_branch.outputs.plan_file_path }})
              
              #### Resultado da Execu√ß√£o do Gemini-CLI:
              ```
              ${{ steps.gemini_run.outputs.result }}
              ```
              `;
            } else {
              output = `
              ### ü§ñ‚ö†Ô∏è Fluxo de Trabalho de IA Conclu√≠do com Aviso

              A branch **${branchName}** foi criada e as altera√ß√µes foram aplicadas, mas **n√£o foi poss√≠vel criar o Pull Request**.

              Consulte o log da Action para mais detalhes. O motivo mais comum √© a branch de destino (`feature/ia`) n√£o existir.
              `;
            }

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });