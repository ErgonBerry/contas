# .github/workflows/run-gemini-from-issue.yml
name: "IA-Driven Development Workflow"

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: write
  pull-requests: write

jobs:
  ia_driven_task:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'ia-driven')

    steps:
      - name: "üîÑ Checkout da branch base"
        uses: actions/checkout@v4
        with:
          ref: 'feature/ia'
          fetch-depth: 0

      - name: "üì¶ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: "üîß Configurar Git"
        run: |
          git config user.name "Gemini-CLI Bot"
          git config user.email "github-actions-bot@users.noreply.github.com"

      - name: "üìÅ Validar template base"
        run: |
          if [ ! -s ia/templates/001-general.md ]; then
            echo "‚ùå Template 'ia/templates/001-general.md' est√° ausente ou vazio."; exit 1;
          fi

      - name: "üå± Criar branch e gerar plano de a√ß√£o"
        id: prepare_branch
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BRANCH_NAME="ia/driven-$TIMESTAMP"
          PLAN_FILE_PATH="ia/templates/$TIMESTAMP.md"
          
          git checkout -b $BRANCH_NAME

          TASK_DESCRIPTION="${{ github.event.issue.body }}"
          TEMPLATE_CONTENT=$(cat ia/templates/001-general.md)

          PLAN_CONTENT="# üß† Plano de A√ß√£o Gerado por IA\n\n## Tarefa\n$TASK_DESCRIPTION\n\n## Etapas Sugeridas\n\n${TEMPLATE_CONTENT//<DESCRICAO_AQUI_CHANGE_ME>/$TASK_DESCRIPTION}"
          PLAN_CONTENT+="\n\nPor favor, implemente esta tarefa agora, sem pedir confirma√ß√£o. Fa√ßa as altera√ß√µes diretamente no c√≥digo e comite na branch \`$BRANCH_NAME\`."

          echo "$PLAN_CONTENT" > "$PLAN_FILE_PATH"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "plan_file_path=$PLAN_FILE_PATH" >> $GITHUB_OUTPUT
          echo "plan_content<<EOF" >> $GITHUB_OUTPUT
          echo "$PLAN_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: "üß† Executar Gemini-CLI com o plano de a√ß√£o"
        id: gemini_run
        env:
          GEMINI_PROMPT: "${{ steps.prepare_branch.outputs.plan_content }}"
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Executando Gemini-CLI com prompt:"
          echo "$GEMINI_PROMPT"
          RESULT=$(npx @google/gemini-cli <<< "$GEMINI_PROMPT")

          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: "üíæ Commit e Push das altera√ß√µes"
        run: |
          git add .

          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è Nenhuma altera√ß√£o de c√≥digo detectada. Comitando apenas plano de a√ß√£o."
            git commit -m "docs(ia): plano de a√ß√£o da issue #${{ github.event.issue.number }}" -m "Issue: ${{ github.event.issue.html_url }}" || true
          else
            echo "‚úÖ Altera√ß√µes detectadas. Comitando tudo."
            git commit -m "feat(ia): implementar tarefa da issue #${{ github.event.issue.number }}" -m "Issue: ${{ github.event.issue.html_url }}" || true
          fi

          git push origin ${{ steps.prepare_branch.outputs.branch_name }}

      - name: "üì¨ Criar Pull Request em modo draft"
        id: create_pr
        uses: actions/github-script@v7
        with:
          script: |
            const headBranch = "${{ steps.prepare_branch.outputs.branch_name }}";
            const baseBranch = "feature/ia";
            const issueTitle = "${{ github.event.issue.title }}";
            const issueNumber = context.issue.number;

            try {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[IA-DRIVEN] ${issueTitle}`,
                head: headBranch,
                base: baseBranch,
                body: `Este PR foi gerado automaticamente pela IA para resolver a issue #${issueNumber}.\n\n- **Plano de A√ß√£o**: [${{ steps.prepare_branch.outputs.plan_file_path }}](${context.payload.repository.html_url}/blob/${headBranch}/${{ steps.prepare_branch.outputs.plan_file_path }})\n- **Issue Original**: #${issueNumber}`,
                draft: true
              });
              console.log(`‚úÖ Pull Request criado: ${pr.data.html_url}`);
              return pr.data;
            } catch (error) {
              console.error(`‚ùå Erro ao criar Pull Request: ${error.message}`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `### ‚ö†Ô∏è Erro ao criar Pull Request\n\nN√£o foi poss√≠vel criar o Pull Request da branch \`${headBranch}\` para \`${baseBranch}\`.\n\n**Motivo prov√°vel:** A branch \`${baseBranch}\` n√£o existe. Por favor, crie-a e o Pull Request poder√° ser aberto manualmente.`
              });
              return null;
            }

      - name: "üó£Ô∏è Postar resultado na issue"
        uses: actions/github-script@v7
        with:
          script: |
            const prResult = ${{ toJSON(steps.create_pr.outputs.result) }};
            const branchName = "${{ steps.prepare_branch.outputs.branch_name }}";
            const repoUrl = context.payload.repository.html_url;
            let prUrl = null;

            if (prResult && typeof prResult === 'object' && prResult.html_url) {
              prUrl = prResult.html_url;
            } else if (typeof prResult === 'string') {
              try {
                const parsed = JSON.parse(prResult);
                if (parsed && parsed.html_url) prUrl = parsed.html_url;
              } catch (e) {}
            }

            const output = prUrl
              ? `
              ### ü§ñ‚ú® Fluxo de Trabalho de IA Conclu√≠do
              
              Um Pull Request em modo draft foi criado com as altera√ß√µes geradas pela IA.
              
              - **Pull Request**: [${{ github.event.issue.title }}](${prUrl})
              - **Branch**: [${branchName}](${repoUrl}/tree/${branchName})
              - **Plano de A√ß√£o**: [${{ steps.prepare_branch.outputs.plan_file_path }}](${repoUrl}/blob/${branchName}/${{ steps.prepare_branch.outputs.plan_file_path }})
              
              #### Resultado da Execu√ß√£o do Gemini-CLI:
              \`\`\`
              ${{ steps.gemini_run.outputs.result }}
              \`\`\`
              `
              : `
              ### ü§ñ‚ö†Ô∏è Fluxo de Trabalho Conclu√≠do com Aviso

              A branch **${branchName}** foi criada e as altera√ß√µes foram aplicadas, mas **n√£o foi poss√≠vel criar o Pull Request** automaticamente.

              Verifique o log da Action. Prov√°vel motivo: a branch base \`feature/ia\` n√£o existe.
              `;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });
